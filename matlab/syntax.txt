The ASA-BCP algorithm is described in the following paper:

A. Cristofari, M. De Santis, S. Lucidi, F. Rinaldi (2017). A Two-Stage
Active-Set Algorithm for Bound-Constrained Optimization. Journal of
Optimization Theory and Applications, 172(2), 369-401.

The ASA-BCP algorithm is implemented in the function 'asa_bcp', defined in
the file 'asa_bcp.m'.

Syntax:
X = ASA_BCP(OBJ,X0,L,U)
X = ASA_BCP(OBJ,X0,L,U,OPTS)
[X,F] = ASA_BCP(__)
[X,F,ASA_BCP_INFO] = ASA_BCP(__)

Input arguments:
- OBJ (required) is a structure of function handle elements, where
  OBJ.funct is the objective function,
  OBJ.grad is the gradient of objective function,
  OBJ.hd_prod is the Hessian-vector product (as described below,
  Hessian-vector products can even be approximated by setting the
  parameter 'hd_exact' to false and, in this case, function 'hd_prod' can
  be omitted);
- X0 (required) is the starting point of the algorithm;
- L (required) is the lower bound on the variables;
- U (required) is the upper bound on the variables;
- OPTS (optional) is a structure containing the values of some algorithm
  parameters (see below).

  See the file 'problem.m' to know input/output arguments of 'funct',
  'grad' and 'hd_prod'.

Output arguments:
- X is the solution found by the algorithm;
- F is the objective value at the solution found by the algorithm
- ASA_BCP_INFO is a structure containing other output values:
  ASA_BCP_INFO.sup_norm_proj_g is the sup-norm of X - P[X-G(X)], where X
  is the solution found by the algorithm, P[.] is the projection operator
  onto [L,U] and G(.) is the gradient of the objective function;
  ASA_BCP_INFO.it is the number of iterations;
  ASA_BCP_INFO.inner_it is the number of inner conjugate gradient
  iterations;
  ASA_BCP_INFO.n_f is the number of function evaluations;
  ASA_BCP_INFO.n_g is the number of gradient evaluations;
  ASA_BCP_INFO.n_hd is the number of Hessian-vector products;
  ASA_BCP_INFO.flag is an integer describing the exit condition:
   -1 if the problem is infeasible,
    0 if ASA_BCP_INFO.sup_norm_proj_g <= 'eps_opt'
      (default value of 'eps_opt' = 1e-5),
    1 if the directional derivative of the objective function along the
      search direction (in absolute value) <= 'min_gd'
      (default value of 'min_gd' = 1e-15),
    2 if the norm of the projected search direction <= 'min_norm_proj_d'
      (default value of 'min_norm_proj_d' = 1e-9),
    3 if the stepsize <= 'min_stepsize'
      (default value of 'min_stepsize' = 1e-20),
    4 if the number of iterations >= 'max_it'
      (default value of 'max_it' = 1000000),
    5 if the number of function evaluations >= 'max_n_f'
      (default value of 'max_n_f' = 1000000),
    6 if the number of gradient evaluations >= 'max_n_g'
      (default value of 'max_n_g' = 1000000),
    7 if the number of Hessian-vector products >= 'max_n_hd'
     (default value of 'max_n_hd' = 1000000).
    8 if the objective value <= 'min_f'
      (default value of 'min_f' = -1e90),
    9 in case of error when computing the objective function,
   10 in case of error when computing the gradient of the objective
      function,
   11 in case of error when computing the Hessian-vector product.

To change the values of the above parameters 'eps_opt', 'min_gd',
'min_proj_d', 'min_stepsize', 'max_it', 'max_n_f', 'max_n_g', 'max_n_hd'
and 'min_f', use the structure OPTS (it is one of the input arguments, see
above), which must have as field names the names of the parameters to be
changed.
Other parameters that can be changed in the same way are the following:
- 'm': history length for the computation of the reference value in the
       line search: set 'm' > 1 for non-monotone line search, or 'm' = 1
       for monotone line search
       (default value of 'm' = 100);
- 'z': according to the non-monotone strategy, the objective function must
       be evaluated upon at least once every 'z' iterations
       (default value of 'z' = 20);
- 'hd_exact': true to compute exact Hessian-vector products, false to
              approximate them
              (default value of 'hd_exact' = true);
- 'verbosity': 0 for no prints, 1 for synthetic prints, 2 for detailed
               prints
               (default value of 'verbosity' = 1).

If 'verbosity' is positive, then the iteration details will be also
reported in file 'iteration_history.txt'.

Finally, if 'hd_exact' is false, the Hessian-vector product H(x)*d is
approximated with [g(x+eps_approx*d)-g(x)]/eps_approx, where g(.) is the
gradient of the objective function and the default value of 'eps_approx'
is 1e-6.
